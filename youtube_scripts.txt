function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Load all videos
async function scroll_down() {
	const num_videos = document.getElementById('stats').firstElementChild.firstElementChild.innerText;
	const num_loads = Math.round(parseInt(num_videos.replace(',', '')) / 100);
	
	console.log(`Detected ${num_videos} videos. Calculating that ${num_loads} loads are required.`);
	
	for(let i = 0; i < num_loads; i++) {
		let prev_height = document.querySelectorAll('ytd-app')[0].offsetHeight;
		let curr_height = prev_height;
		
		console.log(`[${i + 1}] Loading...`);
		while(prev_height === curr_height) {
			window.scrollTo(0, curr_height);
			await sleep(500);
			curr_height = document.querySelectorAll('ytd-app')[0].offsetHeight;
		}
	}
}

// Only run load_all() when devtools isn't open (devtools makes loading very slow)
function load_all() {
	var element = new Image;
	var devtoolsOpen = false;
	element.__defineGetter__("id", function() {
		devtoolsOpen = true; // This only executes when devtools is open.
	});
	var tid = setInterval(function() {
		devtoolsOpen = false;
		console.log(element);
		console.clear();
		if(!devtoolsOpen) {
			clearInterval(tid);
			console.log(`Devtools closed. Starting loading process...`);
			scroll_down();
		}
	}, 1000);
}


// Delete all loaded videos from channel [String] -> 'bad_channel'
async function remove_liked(bad_channel) {
	const icon_index_start = 9;
    const title_index_start = 2;
	const num_loaded_items = document.querySelectorAll('yt-icon-button').length - 12;
	
	var total_removed_videos = 0;
    
    for(let i = 0; i < num_loaded_items; i++) {
		let bad_video_check = document.getElementsByClassName('style-scope ytd-playlist-video-renderer')[16 * i + 9].title;
		if(bad_video_check === '[Private video]' || bad_video_check === '[Deleted video]') {
			console.log(`Bad video of type ${bad_video_check} detected at index [${i + 1}]`);
			return;
		}
		
		let title = document.getElementsByClassName('yt-simple-endpoint style-scope yt-formatted-string')[i + title_index_start].innerText;
		if(title === bad_channel) {
			let dropdown_btn = document.querySelectorAll('yt-icon-button')[i + icon_index_start];
			dropdown_btn.click();
			
			await sleep(500);
			
			let remove_btn = document.querySelectorAll('ytd-menu-service-item-renderer')[3];
			remove_btn.click();
			
			console.log(`[${i + 1}] Removed video by channel ${title}`);
			total_removed_videos += 1;
		}
	}
	console.log(`Removed a total of ${total_removed_videos} videos after going through ${num_loaded_items} loaded videos. Please refresh to see the results.`);
}

// Delete all loaded private or deleted videos from playlist
async function clean_playlist() {
	const icon_index_start = 9;
    const title_index_start = 2;
	const num_loaded_items = document.querySelectorAll('yt-icon-button').length - 12;
	
	var total_removed_videos = 0;
    
    for(let i = 0; i < num_loaded_items; i++) {
		let bad_video_check = document.getElementsByClassName('style-scope ytd-playlist-video-renderer')[16 * i + 9].title;
		if(bad_video_check === '[Private video]' || bad_video_check === '[Deleted video]') {
			let dropdown_btn = document.querySelectorAll('yt-icon-button')[i + icon_index_start];
			dropdown_btn.click();
			
			await sleep(500);
			
			let remove_btn = document.querySelectorAll('ytd-menu-service-item-renderer')[0];
			remove_btn.click();
			
			console.log(`Removed bad video of type ${bad_video_check} detected at index [${i + 1}]`);
			total_removed_videos += 1;
		}
		// console.log(`Skipping [${i}]`);
	}
	console.log(`Removed a total of ${total_removed_videos} videos after going through ${num_loaded_items} loaded videos. Please refresh to see the results.`);
}